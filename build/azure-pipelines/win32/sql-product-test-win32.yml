steps:
- task: NodeTool@0
  inputs:
    versionSpec: "14.x"

- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@3
  inputs:
    versionSpec: "1.x"

- powershell: |
    . build/azure-pipelines/win32/exec.ps1
    $ErrorActionPreference = "Stop"
    $env:CHILD_CONCURRENCY="1"
    exec { git clean -fxd }
  displayName: Clean repo

- task: DownloadPipelineArtifact@2
  inputs:
    buildType: 'current'
    targetPath: '$(Build.SourcesDirectory)\.build'
    artifactName: drop
    itemPattern: |
     drop/extensions/**
     drop/win32-x64/**

- powershell: |
    . build/azure-pipelines/win32/exec.ps1
    $ErrorActionPreference = "Stop"
    $env:CHILD_CONCURRENCY="1"
    exec { yarn --frozen-lockfile }
  displayName: Install dependencies

- powershell: |
    . build/azure-pipelines/win32/exec.ps1
    $ErrorActionPreference = "Stop"
    exec { .\node_modules\7zip\7zip-lite\7z.exe x $(Build.SourcesDirectory)\.build\win32-x64/archive/azuredatastudio-win32-x64.zip -o$(Agent.TempDirectory)\azuredatastudio-win32-x64 }
  displayName: Unzip artifact

- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: SqlToolsSecretStore'
  inputs:
    azureSubscription: 'ClientToolsInfra_670062 (88d5392f-a34f-4769-b405-f597fc533613)'
    KeyVaultName: SqlToolsSecretStore
    SecretsFilter: 'ads-integration-test-azure-server,ads-integration-test-azure-server-password,ads-integration-test-azure-server-username'

- task: DockerInstaller@0
  displayName: Docker Installer
  inputs:
    dockerVersion: 17.09.0-ce
    releaseType: stable

- script: docker pull mcr.microsoft.com/mssql/server:2019-latest
  displayName: Pull MSSQL Docker Image

- bash: echo "##vso[task.setvariable variable=serverPassword]Test-$(Build.BuildNumber)-$(Get-Date -format yyyyMMdd-Hmmss)"
  displayName: Generate password for test server

- script: 'docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=$(serverPassword)" -e "MSSQL_PID=Express"
   -p 1433:1433 --name sql1 -h sql1
   -d mcr.microsoft.com/mssql/server:2019-latest'
  displayName: Start Server in Docker Container

- powershell: |
    . build/azure-pipelines/win32/exec.ps1
    $ErrorActionPreference = "Stop"
    $AppRoot = "$(Agent.TempDirectory)\azuredatastudio-win32-x64"
    $AppProductJson = Get-Content -Raw -Path "$AppRoot\resources\app\product.json" | ConvertFrom-Json
    $AppNameShort = $AppProductJson.nameShort
    exec { $env:INTEGRATION_TEST_ELECTRON_PATH = "$AppRoot\$AppNameShort.exe"; $env:INTEGRATION_TEST_CLI_PATH = "$AppRoot\bin\$AppNameShort"; .\scripts\sql-test-integration.bat }
  continueOnError: false
  condition: and(succeeded(), and(eq(variables['RUN_TESTS'], 'true'), ne(variables['RUN_INTEGRATION_TESTS'], 'false')))
  displayName: Run stable tests
  env:
    STANDALONE_SQL_USERNAME: sa
    STANDALONE_SQL_PWD: $(serverPassword)
    STANDALONE_SQL: localhost
    AZURE_SQL_USERNAME: $(ads-integration-test-azure-server-username)
    AZURE_SQL_PWD: $(ads-integration-test-azure-server-password)
    AZURE_SQL: $(ads-integration-test-azure-server)
    STANDALONE_SQL_USERNAME_2019: sa
    STANDALONE_SQL_PWD_2019: $(serverPassword)
    STANDALONE_SQL_2019: localhost

- powershell: |
    . build/azure-pipelines/win32/exec.ps1
    $ErrorActionPreference = "Stop"
    $AppRoot = "$(Agent.TempDirectory)\azuredatastudio-win32-x64"
    $AppProductJson = Get-Content -Raw -Path "$AppRoot\resources\app\product.json" | ConvertFrom-Json
    $AppNameShort = $AppProductJson.nameShort
    exec { $env:INTEGRATION_TEST_ELECTRON_PATH = "$AppRoot\$AppNameShort.exe"; .\scripts\sql-test-integration-unstable.bat }
  continueOnError: true
  condition: and(succeeded(), and(eq(variables['RUN_UNSTABLE_TESTS'], 'true'), ne(variables['RUN_INTEGRATION_TESTS'], 'false')))
  displayName: Run unstable integration tests
  env:
    STANDALONE_SQL_USERNAME: sa
    STANDALONE_SQL_PWD: $(serverPassword)
    STANDALONE_SQL: localhost
    AZURE_SQL_USERNAME: $(ads-integration-test-azure-server-username)
    AZURE_SQL_PWD: $(ads-integration-test-azure-server-password)
    AZURE_SQL: $(ads-integration-test-azure-server)
    STANDALONE_SQL_USERNAME_2019: sa
    STANDALONE_SQL_PWD_2019: $(serverPassword)
    STANDALONE_SQL_2019: localhost

- task: PublishTestResults@2
  displayName: 'Publish Integration and Smoke Test Results'
  inputs:
    testResultsFiles: '*.xml'
    searchFolder: '$(Build.ArtifactStagingDirectory)\test-results'
    mergeTestResults: true
    failTaskOnFailedTests: true
  continueOnError: true
  condition: and(succeededOrFailed(), and(eq(variables['RUN_TESTS'], 'true'), ne(variables['RUN_INTEGRATION_TESTS'], 'false')))
